// <auto-generated />
using System;
using KTB.LibraryRezervation.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KTB.LibraryRezervation.Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.Desk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeskNo")
                        .HasColumnType("int");

                    b.Property<int>("LibraryHallId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LibraryHallId");

                    b.ToTable("Desks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6680),
                            DeskNo = 1,
                            LibraryHallId = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6710),
                            DeskNo = 2,
                            LibraryHallId = 1
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6720),
                            DeskNo = 3,
                            LibraryHallId = 1
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6720),
                            DeskNo = 4,
                            LibraryHallId = 1
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6720),
                            DeskNo = 5,
                            LibraryHallId = 1
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6720),
                            DeskNo = 6,
                            LibraryHallId = 1
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6720),
                            DeskNo = 7,
                            LibraryHallId = 1
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6720),
                            DeskNo = 8,
                            LibraryHallId = 1
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6730),
                            DeskNo = 1,
                            LibraryHallId = 2
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6730),
                            DeskNo = 2,
                            LibraryHallId = 2
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6730),
                            DeskNo = 3,
                            LibraryHallId = 2
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6730),
                            DeskNo = 4,
                            LibraryHallId = 2
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(6730),
                            DeskNo = 5,
                            LibraryHallId = 2
                        });
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.LibraryHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeskCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LibraryHalls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7310),
                            DeskCapacity = 8,
                            Name = "Salon 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7310),
                            DeskCapacity = 5,
                            Name = "Salon 2"
                        });
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SeatId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeskId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeskId");

                    b.ToTable("Seat");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7760),
                            DeskId = 1,
                            Name = "1A"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7760),
                            DeskId = 1,
                            Name = "1B"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7760),
                            DeskId = 2,
                            Name = "2A"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7760),
                            DeskId = 2,
                            Name = "2B"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7760),
                            DeskId = 3,
                            Name = "3A"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7770),
                            DeskId = 3,
                            Name = "3B"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7770),
                            DeskId = 4,
                            Name = "4A"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7770),
                            DeskId = 4,
                            Name = "4B"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7770),
                            DeskId = 5,
                            Name = "5A"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7770),
                            DeskId = 5,
                            Name = "5B"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7770),
                            DeskId = 6,
                            Name = "6A"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7780),
                            DeskId = 6,
                            Name = "6B"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7780),
                            DeskId = 7,
                            Name = "7A"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7780),
                            DeskId = 7,
                            Name = "7B"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7780),
                            DeskId = 8,
                            Name = "8A"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7780),
                            DeskId = 8,
                            Name = "8B"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7780),
                            DeskId = 9,
                            Name = "1A"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7790),
                            DeskId = 9,
                            Name = "1B"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7790),
                            DeskId = 10,
                            Name = "2A"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7790),
                            DeskId = 10,
                            Name = "2B"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7790),
                            DeskId = 11,
                            Name = "3A"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7790),
                            DeskId = 11,
                            Name = "3B"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7790),
                            DeskId = 12,
                            Name = "4A"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7790),
                            DeskId = 12,
                            Name = "4B"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7800),
                            DeskId = 13,
                            Name = "5A"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 4, 28, 11, 45, 33, 979, DateTimeKind.Local).AddTicks(7800),
                            DeskId = 13,
                            Name = "5B"
                        });
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.WorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.Desk", b =>
                {
                    b.HasOne("KTB.LibraryRezervation.Core.Models.LibraryHall", "LibraryHall")
                        .WithMany("Desks")
                        .HasForeignKey("LibraryHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryHall");
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.Reservation", b =>
                {
                    b.HasOne("KTB.LibraryRezervation.Core.Models.AppUser", "AppUser")
                        .WithMany("Reservations")
                        .HasForeignKey("AppUserId");

                    b.HasOne("KTB.LibraryRezervation.Core.Models.Seat", "Seat")
                        .WithMany("Reservations")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.Seat", b =>
                {
                    b.HasOne("KTB.LibraryRezervation.Core.Models.Desk", "Desk")
                        .WithMany("Seats")
                        .HasForeignKey("DeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desk");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("KTB.LibraryRezervation.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("KTB.LibraryRezervation.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("KTB.LibraryRezervation.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("KTB.LibraryRezervation.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KTB.LibraryRezervation.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("KTB.LibraryRezervation.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.AppUser", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.Desk", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.LibraryHall", b =>
                {
                    b.Navigation("Desks");
                });

            modelBuilder.Entity("KTB.LibraryRezervation.Core.Models.Seat", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
